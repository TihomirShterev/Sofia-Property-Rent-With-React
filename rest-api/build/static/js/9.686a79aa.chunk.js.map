{"version":3,"sources":["pages/login/index.module.css","pages/login/index.js"],"names":["module","exports","LoginPage","props","handleChange","event","type","newState","target","value","setState","handleSubmit","a","preventDefault","state","email","password","emptyFieldsError","fetch","method","body","JSON","stringify","headers","promise","authToken","get","document","cookie","json","response","invalidInputError","context","logIn","id","_id","history","push","console","log","this","emptyFieldsErrorMessage","invalidInputErrorMessage","className","styles","login","onSubmit","htmlFor","name","onChange","e","placeholder","error","to","loggedIn","Component","contextType","UserContext"],"mappings":"gGACAA,EAAOC,QAAU,CAAC,MAAQ,qBAAqB,SAAW,wBAAwB,IAAM,mBAAmB,MAAQ,qBAAqB,MAAQ,qBAAqB,cAAc,6B,gKCO7KC,E,kDACJ,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IAYRC,aAAe,SAACC,EAAOC,GACrB,IAAMC,EAAW,GAEjBA,EAASD,GAAQD,EAAMG,OAAOC,MAE9B,EAAKC,SAASH,IAlBG,EAqBnBI,aArBmB,uCAqBJ,WAAON,GAAP,yBAAAO,EAAA,6DACbP,EAAMQ,iBADO,EAMT,EAAKC,MAFPC,EAJW,EAIXA,MACAC,EALW,EAKXA,SAKGD,GAAUC,EAKb,EAAKN,SAAS,CACZO,kBAAkB,IALpB,EAAKP,SAAS,CACZO,kBAAkB,IAZT,kBAqBWC,MAAM,mDAAoD,CAC9EC,OAAQ,OACRC,KAAMC,KAAKC,UAAU,CACnBP,QACAC,aAEFO,QAAS,CACP,eAAgB,sBA5BT,cAqBLC,EArBK,OAgCLC,EAAYD,EAAQD,QAAQG,IAAI,iBACtCC,SAASC,OAAT,sBAAiCH,GAjCtB,UAmCYD,EAAQK,OAnCpB,SAmCLC,EAnCK,QAsCEf,OAASU,GAEpB,EAAKf,SAAS,CACZqB,mBAAmB,IAErB,EAAKC,QAAQC,MAAM,CACjBlB,MAAOe,EAASf,MAChBmB,GAAIJ,EAASK,MAEf,EAAKhC,MAAMiC,QAAQC,KAAK,MAExB,EAAK3B,SAAS,CACZqB,mBAAmB,IAlDZ,kDAwDXO,QAAQC,IAAI,QAAZ,MAxDW,0DArBI,sDAGjB,EAAKzB,MAAQ,CACXC,MAAO,GACPC,SAAU,GACVe,mBAAmB,EACnBd,kBAAkB,GAPH,E,0CAiFnB,WAAU,IAAD,SAMHuB,KAAK1B,MAJPC,EAFK,EAELA,MACAC,EAHK,EAGLA,SACAe,EAJK,EAILA,kBACAd,EALK,EAKLA,iBAGIwB,EAA0BxB,EAAmB,+BAAiC,KAC9EyB,EAA2BX,IAAsBd,EAAmB,4BAA8B,KAExG,OACE,eAAC,IAAD,WACE,sBAAM0B,UAAWC,IAAOC,MAAOC,SAAUN,KAAK7B,aAA9C,SACE,qCACE,4CAEA,oBAAGgC,UAAWC,IAAO,oBAArB,UACE,uBAAOG,QAAQ,QAAf,SAAuB,+BAAM,mBAAGJ,UAAU,wBAC1C,uBACErC,KAAK,OACL0C,KAAK,QACLd,GAAG,QACHzB,MAAOM,EACPkC,SAAU,SAACC,GAAD,OAAO,EAAK9C,aAAa8C,EAAG,UACtCC,YAAY,8BAIhB,oBAAGR,UAAWC,IAAO,oBAArB,UACE,uBAAOG,QAAQ,WAAf,SAA0B,+BAAM,mBAAGJ,UAAU,oBAC7C,uBACErC,KAAK,WACL0C,KAAK,WACLd,GAAG,WACHzB,MAAOO,EACPiC,SAAU,SAACC,GAAD,OAAO,EAAK9C,aAAa8C,EAAG,aACtCC,YAAY,cAIhB,mBAAGR,UAAWC,IAAOQ,MAArB,SACGV,IAEH,mBAAGC,UAAWC,IAAOQ,MAArB,SACGX,IAEH,wBAAQnC,KAAK,SAAb,mBAEA,oBAAGqC,UAAWC,IAAO,eAArB,4BAEE,cAAC,IAAD,CAAMS,GAAG,iBAAT,8BAKJb,KAAKR,QAAQsB,SAAW,cAAC,IAAD,CAAUD,GAAG,MAAS,Y,GA1IhCE,aAAlBrD,EAYGsD,YAAcC,IAoIRvD","file":"static/js/9.686a79aa.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"login\":\"login_login__2u4EU\",\"register\":\"login_register__2ElGk\",\"tel\":\"login_tel__2lqr5\",\"field\":\"login_field__1I9ll\",\"error\":\"login_error__11skI\",\"input-error\":\"login_input-error__1Lyp3\"};","import React, { Component } from 'react';\r\nimport Layout from '../../components/layout';\r\nimport styles from './index.module.css';\r\nimport {\r\n  Link, Redirect\r\n} from 'react-router-dom';\r\nimport UserContext from '../../Context';\r\n\r\nclass LoginPage extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      email: \"\",\r\n      password: \"\",\r\n      invalidInputError: false,\r\n      emptyFieldsError: false\r\n    };\r\n  }\r\n\r\n  static contextType = UserContext;\r\n\r\n  handleChange = (event, type) => {\r\n    const newState = {};\r\n    // console.log(event);\r\n    newState[type] = event.target.value;\r\n\r\n    this.setState(newState);\r\n  }\r\n\r\n  handleSubmit = async (event) => {\r\n    event.preventDefault(); // so page doesn't reload\r\n\r\n    const {\r\n      email,\r\n      password\r\n    } = this.state;\r\n\r\n    // console.log(this.context);\r\n\r\n    if (!email || !password) {\r\n      this.setState({\r\n        emptyFieldsError: true\r\n      });\r\n    } else {\r\n      this.setState({\r\n        emptyFieldsError: false\r\n      });\r\n    }\r\n\r\n    try {\r\n      const promise = await fetch('https://estatesbg.herokuapp.com/api/users/login', {\r\n        method: 'POST',\r\n        body: JSON.stringify({\r\n          email,\r\n          password\r\n        }),\r\n        headers: {\r\n          'Content-Type': 'application/json'\r\n        }\r\n      });\r\n\r\n      const authToken = promise.headers.get('Authorization'); // #rest-api/index.js\r\n      document.cookie = `auth-cookie=${authToken}`; // we save the token in the cookie (#rest-api/app-config)\r\n      // and when we log in, we'll already have the cookie in DevTools/Application \r\n      const response = await promise.json();\r\n      // console.log(response);\r\n\r\n      if (response.email && authToken) {\r\n        // console.log('Yay!');\r\n        this.setState({\r\n          invalidInputError: false\r\n        });\r\n        this.context.logIn({\r\n          email: response.email,\r\n          id: response._id\r\n        });\r\n        this.props.history.push('/'); // if all good, we redirect to homePage\r\n      } else {\r\n        this.setState({\r\n          invalidInputError: true\r\n        });\r\n        // console.log('Error');\r\n      }\r\n\r\n    } catch (err) {\r\n      console.log('Error', err);\r\n    }\r\n  };\r\n\r\n  render() {\r\n    const {\r\n      email,\r\n      password,\r\n      invalidInputError,\r\n      emptyFieldsError\r\n    } = this.state;\r\n\r\n    const emptyFieldsErrorMessage = emptyFieldsError ? 'Please fill all fields above' : null;\r\n    const invalidInputErrorMessage = invalidInputError && !emptyFieldsError ? 'Invalid email or password' : null;\r\n\r\n    return (\r\n      <Layout>\r\n        <form className={styles.login} onSubmit={this.handleSubmit}>\r\n          <fieldset>\r\n            <h2>Login Form</h2>\r\n\r\n            <p className={styles[\"field field-icon\"]}>\r\n              <label htmlFor=\"email\"><span><i className=\"fas fa-envelope\"></i></span></label>\r\n              <input\r\n                type=\"text\"\r\n                name=\"email\"\r\n                id=\"email\"\r\n                value={email}\r\n                onChange={(e) => this.handleChange(e, 'email')}\r\n                placeholder=\"pesho.peshev@gmail.com\"\r\n              />\r\n            </p>\r\n\r\n            <p className={styles[\"field field-icon\"]}>\r\n              <label htmlFor=\"password\"><span><i className=\"fas fa-lock\"></i></span></label>\r\n              <input\r\n                type=\"password\"\r\n                name=\"password\"\r\n                id=\"password\"\r\n                value={password}\r\n                onChange={(e) => this.handleChange(e, 'password')}\r\n                placeholder=\"******\"\r\n              />\r\n            </p>\r\n\r\n            <p className={styles.error}>\r\n              {invalidInputErrorMessage}\r\n            </p>\r\n            <p className={styles.error}>\r\n              {emptyFieldsErrorMessage}\r\n            </p>\r\n            <button type=\"submit\">Login</button>\r\n\r\n            <p className={styles[\"text-center\"]}>\r\n              No account yet?\r\n              <Link to=\"/user/register\">Register</Link>\r\n            </p>\r\n\r\n          </fieldset>\r\n        </form>\r\n        { this.context.loggedIn ? <Redirect to=\"/\" /> : null}\r\n      </Layout>\r\n    );\r\n  };\r\n}\r\n\r\nexport default LoginPage;"],"sourceRoot":""}